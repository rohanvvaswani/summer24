[Using the Terminal]

python3 -m venv envdata
source envdata/bin/activate
pip install pandas numpy matplotlib scikit-learn yfinance alpha_vantage
Python 3

import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Using Apple as an example
ticker = 'AAPL'
data = yf.download(ticker, start='2020-01-01', end='2023-12-31')

# Calculate moving averages
data['MA50'] = data['Close'].rolling(window=50).mean()
data['MA200'] = data['Close'].rolling(window=200).mean()

# Function to plot stock prices and moving averages
def plot_stock_data():
    plt.figure(figsize=(10, 6))
    plt.plot(data['Close'], label='Close Price')
    plt.plot(data['MA50'], label='50-day MA')
    plt.plot(data['MA200'], label='200-day MA')
    plt.title('Stock Price and Moving Averages for Apple Inc.')
    plt.legend()
    plt.show()

# Display the stock data plot
plot_stock_data()

# Prepare data for linear regression
data['Day'] = range(len(data))
X = data[['Day']]
y = data['Close']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Fit the model and predict
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Calculate mean squared error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Function to plot actual vs predicted prices
def plot_prediction():
    plt.figure(figsize=(10, 6))
    plt.plot(y_test.index, y_test, label='Actual Price')
    plt.plot(y_test.index, y_pred, label='Predicted Price')
    plt.title('Actual vs. Predicted Stock Prices for Apple Inc.')
    plt.legend()
    plt.show()

# Display the prediction plot
plot_prediction()

